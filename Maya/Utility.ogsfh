/**
 * Common globals and functions
 */

// Transformation matrices
uniform mat4 u_MVPMatrix : WorldViewProjection;
uniform mat4 u_ProjMatrix : Projection;
uniform mat4 u_ModelMatrix : World;
uniform mat4 u_ViewMatrix : View;
uniform mat4 u_NormalMatrix : WorldInverseTranspose;
uniform mat4 u_CameraMatrix : ViewInverse;
uniform mat4 u_ViewProjMatrix : ViewProjection < string UIWidget = "None"; >;

#define EPSILON 0.000001
#define PI 3.14

#define CAMERA_POSITION u_CameraMatrix[3]

/**
 * Common functions group
 */
GLSLShader Utility
{
    /**
     * 9-sample fast Gaussian blur
     * 
     * @author https://github.com/Jam3/glsl-fast-gaussian-blur
     */
    vec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
        vec4 color = vec4(0.0);
        vec2 off1 = vec2(1.3846153846) * direction;
        vec2 off2 = vec2(3.2307692308) * direction;
        color += texture2D(image, uv) * 0.2270270270;
        color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;
        color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;
        color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;
        color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;
        return color;
    }
    
    float distanceToSegment(vec2 point, vec2 a, vec2 b) {
        float dist = length(a - b);
        vec2 v = normalize(b - a);
        float t = dot(v, point - a);

        // Determine which is the closest point to measure
        // distance from - either an endpoint or an interpolation
        // somewhere in the middle
        vec2 segmentPoint;
        if (t > dist) {
            segmentPoint = b;
        } else if (t > 0.0) {
            segmentPoint = a + t * v;
        } else {
            segmentPoint = a;
        }

        return length(point - segmentPoint);
    }
}
