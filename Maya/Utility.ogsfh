/**
 * Common globals and functions
 */

// Transformation matrices
uniform mat4 u_MVPMatrix : WorldViewProjection;
uniform mat4 u_ProjMatrix : Projection;
uniform mat4 u_ModelMatrix : World;
uniform mat4 u_ViewMatrix : View;
uniform mat4 u_NormalMatrix : WorldInverseTranspose;
uniform mat4 u_CameraMatrix : ViewInverse;
uniform mat4 u_ViewProjMatrix : ViewProjection < string UIWidget = "None"; >;

#define EPSILON 0.000001
#define PI 3.14

#define CAMERA_POSITION u_CameraMatrix[3]

/**
 * Common functions group
 */
GLSLShader Utility
{
    /**
     * 9-sample fast Gaussian blur
     * 
     * @author https://github.com/Jam3/glsl-fast-gaussian-blur
     */
    vec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
        vec4 color = vec4(0.0);
        vec2 off1 = vec2(1.3846153846) * direction;
        vec2 off2 = vec2(3.2307692308) * direction;
        color += texture2D(image, uv) * 0.2270270270;
        color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;
        color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;
        color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;
        color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;
        return color;
    }
    
    float distanceToSegment(vec2 point, vec2 a, vec2 b) {
        float dist = length(a - b);
        vec2 v = normalize(b - a);
        float t = dot(v, point - a);

        // Determine which is the closest point to measure
        // distance from - either an endpoint or an interpolation
        // somewhere in the middle
        vec2 segmentPoint;
        if (t > dist) {
            segmentPoint = b;
        } else if (t > 0.0) {
            segmentPoint = a + t * v;
        } else {
            segmentPoint = a;
        }

        return length(point - segmentPoint);
    }

    /**
     * Damm Algorithm for error checking a value
     *
     * @param int val To apply the algorithm against (without the original damm byte)
     */
    bool damm(int val) {
        // Damm Algorithm matrix is sourced from:
        // https://en.wikibooks.org/wiki/Algorithm_Implementation/Checksums/Damm_Algorithm#Python
        int matrix[10][10] = {
            {0, 3, 1, 7, 5, 9, 8, 6, 4, 2},
            {7, 0, 9, 2, 1, 5, 4, 8, 6, 3},
            {4, 2, 0, 6, 8, 7, 1, 3, 5, 9},
            {1, 7, 5, 0, 9, 8, 3, 4, 2, 6},
            {6, 1, 2, 3, 0, 4, 5, 9, 7, 8},
            {3, 6, 7, 4, 2, 0, 9, 5, 8, 1},
            {5, 8, 6, 9, 7, 2, 0, 1, 3, 4},
            {8, 9, 4, 5, 3, 6, 2, 0, 1, 7},
            {9, 4, 3, 8, 6, 1, 7, 2, 0, 5},
            {2, 5, 8, 1, 4, 3, 6, 7, 9, 0}
        };

        int interim = 0;
        interim = matrix[interim][int(floor(val / 1000))];
        interim = matrix[interim][int(floor(val % 1000 / 100))];
        interim = matrix[interim][int(floor(val % 100 / 10))];
        interim = matrix[interim][val % 10];

        return interim == 0;
    }

    // Data extraction from a crease alpha value
    struct CreaseInfo {
        bool valid;
        int id;
        int lod;
        int mode;
        bool bump;
        float thickness;
    };

    CreaseInfo extractCreaseInfo(float a) {
        CreaseInfo info;

        // Early exit if there's no alpha value 
        info.valid = a > EPSILON && damm(int(floor(a * 10000)));

        if (info.valid) {
            int x = int(floor(a * 1000));

            info.lod = (x & 768) / 256;
            info.mode = (x & 192) / 64;
            info.bump = (x & 32) > 30;
            info.thickness = (x & 31) / 31.0;
        }
        
        return info;
    }
}
